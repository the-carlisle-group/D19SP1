 Z←OnRumbaRequest request
 ;response
 ;entry
 ;entryRef
 ;vm
 ;vc
 ;vii
 ;methodFoo
 ;appRef
 ;appName
 ;appIndex
 ;segmentCount
 ;authHeader
 ;methodIndex
 ;methodName
 ;⎕TRAP

⍝ Force query param names to lowercase
⍝ This server is not case sensitive but other applications may
⍝ require strict adherence to casing.
 request.QueryParameters[;0]←Utils.ToLower¨request.QueryParameters[;0]

⍝ Initiate a new Rumba Response object that is based on the Request
 response←#.CarlisleGroup.Rumba.Core.NewResponse request

⍝ Set response to Z
 Z←response

⍝ metadata is used to store non-request specific data during execution.
 response.metadata←⎕NS''

⍝ Web browser request like an icon for the page.  This will return a .ico
⍝ resource and quit processing.
 :If request.Path≡'/favicon.ico'
     Z←response GetFavIcon request
     :Return
 :EndIf

⍝ Set the default response to http status code 404 -> Not Found
⍝ We'll rely on this when checking for required resources.
 response.StatusCode←404

⍝ Set trap to catch any subsequent error and run the SendError routine
⍝ SendError will return a JSON structure containing
⍝  ⎕DMX
⍝  APL Version
⍝  Copy of metadata.  Extreme care should be taken not to place sensitive
⍝                     data into the Response.metadata namespace.
⍝ Error ⎕EN = 720 will expect ⎕ENX to be a valid https status code
⍝ which will be set as response.StatusCode←⎕DMX.ENX
 ⎕TRAP←0 'C' 'Z←response SendError ⎕DMX ⋄ →0'

⍝ Check if request contains auth header
⍝ if valid, request object will have all user access rights
⍝ in set as variables.
⍝ !!! CAUTION !!! NOT TO EXPOSE THESE LATER ON!!!!
 response AuthorizeUnEnPw request

⍝ get path segment count.  items between slashes after the domain
 segmentCount←≢request.Segments

⍝ Check if a path was defined.  This server requires a valid
⍝ app and endpoint to continue processing.  no path -> 404
 →(0=≢segmentCount)/0

⍝ Get intial app entry.  Must match one defined in serttings
 appName←0⊃request.Segments
 appIndex←_settingsApps.name⍳⊂appName
 →(appIndex=≢_settingsApps)/0
 appRef←_settingsApps[appIndex].ref

⍝ check if endpont was included in uri
⍝ exmaple.. /demoapp/html/ = min two segments
 →(segmentCount<2)/0

⍝ Get the initial requested endpoint.  This is always at
⍝ position 0 of request.Segments.
⍝ I.e. domain.com/files/file -> /files
 entry←Utils.ToLower 1⊃request.Segments

⍝ Check if Endpoints namespace contains a namespace
⍝ with the same name as the requested endpoint.
⍝ If not, get out.  The default 404 response will be sent.
 →(0=appRef.⎕NC entry)/0

⍝ Get reference to desierved endpoint namespace.
 entryRef←appRef⍎entry

⍝ All endpoint namespaces must have a variable or function
⍝ called "ValidRequestType" that returns a vector of vectors
⍝ with allowed HTTP methods and possible output ⍝ content types.
 vm vc←⊂[0]entryRef._ValidRequestTypes

⍝ Get index of user request method in result of ValidRequestTypes
 vii←vm⍳⊆request.Method

⍝ Send invalid method error of index is invalid.
 :If vii=≢vm
    ⍝ HTTP method not implemented -> 501
     Z←response SendInvalidMethod request
     :Return
 :EndIf

⍝ Set response content type based on request and available
⍝ content type results for the endpoint.
 response.ContentType←entryRef GetResponseContentType request

⍝ Each endpoint must have a function named after each valid
⍝ http method.   If your endpoint supports GET, PUT and DELETE
⍝ you must have the function GET, PUT and DELETE in the endpoint
⍝ namespace.  These must have the request and produce valid
⍝ results and status codes for the request method.

⍝ Check if request http method event handler exists.
 methodIndex←entryRef._Operations[;0]⍳⊂request.Method

 :If methodIndex=≢entryRef._Operations
    ⍝ handler function missing?
     'HTTP handler method not implemented.'⎕SIGNAL 11
 :EndIf

 methodName←1⊃entryRef._Operations[methodIndex;]

 :If 3≠entryRef.⎕NC methodName
    ⍝ handler operation missing?
     'HTTP handler operation not implemented.'⎕SIGNAL 11
 :EndIf

⍝ Get reference to http method function handler in endpoint namespace
 methodFoo←entryRef⍎methodName

⍝ Call the handler method and assign Rumba.Response object
⍝ to result of this function, which the server will construct
⍝ into a valid http response and send back to the client.
 Z←response methodFoo request
